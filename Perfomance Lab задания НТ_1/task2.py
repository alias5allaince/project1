from math import sqrt

# точка 1
x1=-2
y1=25
z1=-63

# точка 2
x2=2
y2=3
z2=4

# сфера
R=100  # радиус
x0=0
y0=52
z0=39

# направляющий вектор прямой

AB=[x2-x1,y2-y1,z2-z1]

m=x1-x0 # для простоты раскрытия скобок в будущем
n=y1-y0
b=z1-z0

# =============================================================================
# параметрическое уравнение прямой, система уравнений
# x=AB[0]*t+x1
# y=AB[1]*t+y1
# z=AB[2]*t+z1
# 
# формула сферы: R**2=(x-x0)**2 + (y-y0)**2+(z-z0)**2
#
# подставляем значения x,y,z, полученные выше, в уранение сферы, получаем:
# (AB[0]*t+x1-x0)**2 + (AB[1]*t+y1-y0)**2 + (AB[2]*t+z1-z0)**2 = R**2
# 
# вводим переменные m, n, b (для упрощения рскрытия скобок), раскрываем скобки:
# (AB[0]*t+m)**2 + (AB[1]*t+n)**2 + (AB[2]*t+b)**2 = R**2

# (AB[0]**2)*(t**2) + 2*AB[0]*t*m + m**2 + (AB[1]**2)*(t**2) + 2*AB[1]*t*n + n**2 + (AB[2]**2)*(t**2) + 2*AB[2]*t*b + b**2 = R**2
# 
# приводим к классическому квадратному уравнению с одной неизвестной, - t, остальные переменные известны:
# (AB[0]**2+AB[1]**2+AB[2]**2)*t**2 + (2*AB[0]*m + 2*AB[1]*n + 2*AB[2]*b)*t + (m**2+n**2+b**2-R**2) = 0
# =============================================================================

discr = (2*AB[0]*m + 2*AB[1]*n + 2*AB[2]*b)**2 - 4*(AB[0]**2+AB[1]**2+AB[2]**2)*(m**2+n**2+b**2-R**2) # находим дискриминант


if discr<0:
    print("Коллизий не найдено")
elif discr==0:
    t=(((-1) * (2*AB[0]*m + 2*AB[1]*n + 2*AB[2]*b)) + sqrt(discr))/(2*(AB[0]**2+AB[1]**2+AB[2]**2))
    A=[AB[0]*t+x1, AB[1]*t+y1,AB[2]*t+z1]
    print("Одна точка пересечения")
    print(A)
else:
    t1 = (((-1) * (2*AB[0]*m + 2*AB[1]*n + 2*AB[2]*b))+sqrt(discr))/(2*(AB[0]**2+AB[1]**2+AB[2]**2))
    A=[round(AB[0]*t1+x1,2), round(AB[1]*t1+y1,2), round(AB[2]*t1+z1,2)]
    t2 = (((-1) * (2*AB[0]*m + 2*AB[1]*n + 2*AB[2]*b))-sqrt(discr))/(2*(AB[0]**2+AB[1]**2+AB[2]**2))
    B=[round(AB[0]*t2+x1,2), round(AB[1]*t2+y1,2), round(AB[2]*t2+z1,2)]
    print("Две точки пересечения")
    print(A)
    print(B)

